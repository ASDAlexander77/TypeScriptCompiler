name: Test(+CodeQL) - Release - Windows

on:
#  push:
#    branches: [ main ]
  workflow_dispatch:
    branches: [ main ]
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
#    - name: check disk space
#      run: Get-PSDrive
#      shell: pwsh

    - uses: actions/checkout@v2

    - name: Cache Build 3rd Party
      id: cache-3rd-party
      uses: actions/cache@v2
      with:
        path: __build/llvm
        key: ${{ runner.os }}-build-llvm-v2

    - name: Cache 3rd Party binaries
      id: cache-3rd-party-binary
      uses: actions/cache@v2
      with:
        path: 3rdParty
        key: ${{ runner.os }}-3rd-party-v2

    - name: Cache 3rd Party binaries - LLVM 13 Release
      id: cache-3rd-party-binary-llvm-13-release
      uses: actions/cache@v2
      with:
        path: llvm_13_release.zip
        key: ${{ runner.os }}-3rd-party-llvm-13-release-v2

    - name: Delete __Build TS folders
      continue-on-error: true
      run: if (Test-Path -Path ".\__build\tsc-release") { Remove-Item -Recurse -Force ".\__build\tsc-release" }
      shell: pwsh

    - name: Create __Build Folders
      run: if (!(Test-Path -Path ".\__build\tsc-release")) { New-Item -ItemType Directory -Force -Path ".\__build\tsc-release" }; if (!(Test-Path -Path ".\__build\llvm\release")) { New-Item -ItemType Directory -Force -Path ".\__build\llvm\release" }; if (!(Test-Path -Path ".\__build\gc-release")) { New-Item -ItemType Directory -Force -Path ".\__build\gc-release" };
      shell: pwsh
    
    - name: Download 3rd party - LLVM
      continue-on-error: true
      shell: pwsh
      if: hashFiles('llvm_13_release.zip') == ''
      run: Invoke-WebRequest -Uri "https://www.dropbox.com/s/o8hrv8ppqayu6vg/llvm_13_release.zip?dl=1" -OutFile "llvm_13_release.zip"

    - name: UnZip 3rd party - LLVM
      continue-on-error: false
      if: hashFiles('llvm_13_release.zip') != ''
      run: Expand-Archive -Path "llvm_13_release.zip" -DestinationPath "3rdParty\llvm\" -Force
      shell: pwsh

    - name: Download 3rd party source - GC
      continue-on-error: true
      shell: pwsh
      if: hashFiles('gc-8.0.4.tar.gz') == ''
      run: Invoke-WebRequest -Uri "https://www.hboehm.info/gc/gc_source/gc-8.0.4.tar.gz" -OutFile "gc-8.0.4.tar.gz"

    - name: Download 3rd party source - GC:Atomic_ops
      continue-on-error: true
      shell: pwsh
      if: hashFiles('libatomic_ops-7.6.10.tar.gz') == ''
      run: Invoke-WebRequest -Uri "https://www.hboehm.info/gc/gc_source/libatomic_ops-7.6.10.tar.gz" -OutFile "libatomic_ops-7.6.10.tar.gz"

    - name: UnZip 3rd party source - GC
      continue-on-error: false
      if: hashFiles('gc-8.0.4.tar.gz') != ''
      run: tar -xvzf gc-8.0.4.tar.gz -C ./3rdParty/
      shell: pwsh

    - name: UnZip 3rd party source - GC:Atomic_ops
      continue-on-error: false
      if: hashFiles('libatomic_ops-7.6.10.tar.gz') != ''
      run: tar -xvzf libatomic_ops-7.6.10.tar.gz -C ./3rdParty/
      shell: pwsh

    - name: Create gc-8.0.4\libatomic_ops Folders
      run: if (!(Test-Path -Path ".\3rdParty\gc-8.0.4\libatomic_ops")) { New-Item -ItemType Directory -Force -Path ".\3rdParty\gc-8.0.4\libatomic_ops" };
      shell: pwsh

    - name: Copy Atomic_ops to GC
      continue-on-error: false
      run:  xcopy  /E /H /C /I /Y ".\3rdParty\libatomic_ops-7.6.10" ".\3rdParty\gc-8.0.4\libatomic_ops"
      shell: pwsh

    - name: Copy fixes to GC
      continue-on-error: false
      run: xcopy  /E /H /C /I /Y ".\docs\fix\gc" ".\3rdParty\gc-8.0.4"
      shell: pwsh

    - name: Configure GC
      continue-on-error: false
      working-directory: ${{github.workspace}}/__build/gc-release
      run: cmake ../../3rdParty/gc-8.0.4 -G "Visual Studio 16 2019" -A x64 -Wno-dev -Denable_threads=ON -Denable_cplusplus=OFF
      shell: pwsh

    - name: Build GC
      continue-on-error: false
      working-directory: ${{github.workspace}}/__build/gc-release
      run: cmake --build . --config ${{ env.BUILD_TYPE }} -j 8
      shell: pwsh

    - name: Copy GC
      continue-on-error: false
      working-directory: ${{github.workspace}}/__build/gc-release
      run:  xcopy /Y .\${{ env.BUILD_TYPE }}\*.* ..\..\3rdParty\gc\release\
      shell: pwsh

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: cpp
        config-file: ./.github/codeql/codeql-config.yml

    - name: Configure
      continue-on-error: false
      working-directory: ${{github.workspace}}/__build/tsc-release
      run: cmake ../../tsc -G "Visual Studio 16 2019" -A x64 -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -Wno-dev
      shell: pwsh

    - name: Build
      continue-on-error: false
      working-directory: ${{github.workspace}}/__build/tsc-release
      run: cmake --build . --config ${{ env.BUILD_TYPE }} -j 8
      shell: pwsh

    - name: Test
      working-directory: ${{github.workspace}}/__build/tsc-release
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -j18 -C ${{ env.BUILD_TYPE }} -T test --output-on-failure -T test --output-on-failure
      shell: pwsh
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1
