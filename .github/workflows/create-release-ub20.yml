name: Create Release/Upload Asset

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build_on_linux:
    name: Create/Upload Release Asset (Ubuntu 20.04)

    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2

      - name: Cache Build 3rd Party
        id: cache-3rd-party
        uses: actions/cache@v2
        with:
          path: __build/llvm-ninja
          key: ${{ runner.os }}-build-llvm-15-v5

      - name: Cache 3rd Party binaries
        id: cache-3rd-party-binary
        uses: actions/cache@v2
        with:
          path: 3rdParty
          key: ${{ runner.os }}-3rd-party-15-v5

      - name: Cache 3rd Party binaries - LLVM 15 Release
        id: cache-3rd-party-binary-llvm-15-release
        uses: actions/cache@v2
        with:
          path: llvm_15_release.tgz
          key: ${{ runner.os }}-3rd-party-llvm-15-release-v5

      - name: Delete __Build TS folders
        continue-on-error: true
        run: rm -R ./__build/tsc-ninja-release
        shell: sh

      - name: Create __Build Folders
        run: mkdir -p ./__build/tsc-ninja-release; mkdir -p ./__build/gc-ninja-release
        shell: sh
      
      - name: Download 3rd party - LLVM
        continue-on-error: true
        shell: sh
        if: hashFiles('llvm_15_release.tgz') == ''
        run: curl -L https://www.dropbox.com/s/y4wa5r3ms84keb9/llvm_15_release.tgz?dl=1 --output llvm_15_release.tgz

      - name: UnZip 3rd party - LLVM
        continue-on-error: false
        shell: sh
        if: hashFiles('llvm_15_release.tgz') != ''
        run: file llvm_15_release.tgz; mkdir -p ./3rdParty/llvm-ninja; tar -xf llvm_15_release.tgz -C ./3rdParty/llvm-ninja/
        #run: file llvm_15_release.tgz; unzip llvm_15_release.tgz -d ./3rdParty/llvm-ninja/

      - name: Download 3rd party source - GC
        continue-on-error: true
        shell: sh
        if: hashFiles('gc-8.0.4.tar.gz') == ''
        run: curl -L https://www.hboehm.info/gc/gc_source/gc-8.0.4.tar.gz --output gc-8.0.4.tar.gz

      - name: Download 3rd party source - GC:Atomic_ops
        continue-on-error: true
        shell: sh
        if: hashFiles('libatomic_ops-7.6.10.tar.gz') == ''
        run: curl -L https://www.hboehm.info/gc/gc_source/libatomic_ops-7.6.10.tar.gz --output libatomic_ops-7.6.10.tar.gz

      - name: UnZip 3rd party source - GC
        continue-on-error: false
        shell: sh
        if: hashFiles('gc-8.0.4.tar.gz') != ''
        run: tar -xvzf gc-8.0.4.tar.gz -C ./3rdParty/

      - name: UnZip 3rd party source - GC:Atomic_ops
        continue-on-error: false
        shell: sh
        if: hashFiles('libatomic_ops-7.6.10.tar.gz') != ''
        run: tar -xvzf libatomic_ops-7.6.10.tar.gz -C ./3rdParty/

      - name: Copy Atomic_ops to GC
        continue-on-error: false
        shell: sh
        run:  cp -a ./3rdParty/libatomic_ops-7.6.10/ ./3rdParty/gc-8.0.4/libatomic_ops/

      - name: Copy fixes to GC
        continue-on-error: false
        shell: sh
        run: cp -ar ./docs/fix/gc/* ./3rdParty/gc-8.0.4/

      - name: Install Ninja
        continue-on-error: false
        shell: sh
        run: sudo apt install ninja-build

  #    - name: Install Clang 12
  #      continue-on-error: false
  #      shell: sh
  #      run: sudo apt install clang-12

      - name: Configure GC
        continue-on-error: false
        working-directory: ${{github.workspace}}/__build/gc-ninja-release
        shell: sh
        run: cmake ../../3rdParty/gc-8.0.4 -G "Ninja" -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -Wno-dev -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_INSTALL_PREFIX=../../3rdParty/gc/release -Denable_threads=ON -Denable_cplusplus=OFF

      - name: Build GC
        continue-on-error: false
        working-directory: ${{github.workspace}}/__build/gc-ninja-release
        shell: sh
        run: cmake --build . --config ${{ env.BUILD_TYPE }} -j 8

      - name: Copy GC
        continue-on-error: false
        working-directory: ${{github.workspace}}/__build/gc-ninja-release
        shell: sh
        run: mkdir -p ../../3rdParty/gc/release/; cp ./lib* ../../3rdParty/gc/release/

      - name: Configure
        continue-on-error: false
        working-directory: ${{github.workspace}}/__build/tsc-ninja-release
        shell: sh
        run: cmake ../../tsc -G "Ninja" -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -Wno-dev

      - name: Build
        continue-on-error: false
        working-directory: ${{github.workspace}}/__build/tsc-ninja-release
        shell: sh
        run: cmake --build . --config ${{ env.BUILD_TYPE }} -j 4

      - name: Test
        continue-on-error: false
        working-directory: ${{github.workspace}}/__build/tsc-ninja-release
        shell: sh
        # Execute tests defined by the CMake configuration.  
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -j18 -C ${{ env.BUILD_TYPE }} -T test --output-on-failure -T test --output-on-failure
        
      - name: Create Tar.GZ of Linux Asset
        working-directory: ${{github.workspace}}/__build
        shell: sh
        run: tar -czvf ../tsc.tar.gz ./tsc-ninja-release/bin/tsc ./tsc-ninja-release/lib/libTypeScriptRuntime.so ./tsc-ninja-release/lib/libTypeScriptRuntime.so.15 ./gc-ninja-release/libgc-lib.a 

      - name: Archive Tar.GZ of Linux Asset
        uses: actions/upload-artifact@v2
        with:
          name: tsc-linux-asset
          path: tsc-ub20.tar.gz
          retention-days: 1   

  create_release:
    needs: [build_on_linux]
    name: Create Release (Ubuntu 20.04)
    runs-on: ubuntu-20.04
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }} Ubuntu 20.04
          draft: true
          prerelease: true
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

  deploy_linux_asset:
    needs: create_release
    name: Upload Release (Ubuntu 20.04)
    runs-on: ubuntu-latest
    steps:
      - name: Download Release Asset from Store
        uses: actions/download-artifact@v2
        with:
          name: tsc-linux-asset

      - name: Upload Release Asset (Ubuntu 20.04)
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./tsc-ub20.tar.gz
          asset_name: tsc-ub20.tar.gz
          asset_content_type: application/tar+gzip
