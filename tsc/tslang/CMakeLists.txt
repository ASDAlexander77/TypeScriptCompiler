# Infrastructure to build flang driver entry point. Flang driver depends on
# LLVM libraries.

macro(set_tslang_windows_version_resource_properties name)
  if (DEFINED windows_resource_file)
    set_windows_version_resource_properties(${name} ${windows_resource_file}
      VERSION_MAJOR ${TSLANG_VERSION_MAJOR}
      VERSION_MINOR ${TSLANG_VERSION_MINOR}
      VERSION_PATCHLEVEL ${TSLANG_VERSION_PATCHLEVEL}
      VERSION_STRING "${TSLANG_VERSION}"
      PRODUCT_NAME "tslang")
  endif()
endmacro()

macro(add_tslang_executable name)
  add_llvm_executable(${name} ${ARGN})
  set_target_properties(${name} PROPERTIES FOLDER "TypeScript executables")
  set_tslang_windows_version_resource_properties(${name})
endmacro(add_tslang_executable)

macro(add_tslang_tool name)
  add_tslang_executable(${name} ${ARGN})
endmacro()

# find Clang
message(STATUS "LLVM_BINARY_DIR is ${LLVM_BINARY_DIR}")

find_package(Clang PATHS "${LLVM_BINARY_DIR}" NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)
if (NOT Clang_FOUND)
    message(FATAL_ERROR "Failed to find Clang")
endif()

# Set your project compile flags.
link_directories(${LLVM_LIBRARY_DIR})

set(LLVM_LINK_COMPONENTS
  ${LLVM_TARGETS_TO_BUILD}
  Option
  Support
  TargetParser
)

add_tslang_tool(tslang
  tslang.cpp

  DEPENDS
  # These libraries are used in the linker invocation generated by the driver
  # (i.e. when constructing the linker job). Without them the driver would be
  # unable to generate executables.
  # ...
)

target_link_libraries(tslang
  PRIVATE
  # ...
)

clang_target_link_libraries(tslang
  PRIVATE
  clangDriver
  clangBasic
)